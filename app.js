let workspace;
let currentLevel = 0;
let state;
let program = [];

// –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏-—Å–ø—Ä–∞–π—Ç—ã
const EMOJI = {
  R: 'img/rabbit.png',
  E: 'img/door.png',
  C: 'img/carrot.png',
  W: 'img/wall.png',
  '.': 'img/empty2.png'
};

// –∑–≤—É–∫–∏ (–ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç–∏ –∏ —Ñ–∞–π–ª—ã)
const sounds = {
  fail: new Audio('sounds/fail.mp3'),
  win: new Audio('sounds/win.mp3'),
  carrot: new Audio('sounds/carrot.wav')
};

// canvas –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
let fxCanvas, ctx, cell;
const CARROT_POP_MS = 400;
const EXIT_FX_MS = 600;

function $(sel) { return document.querySelector(sel); }
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

/* ============ Blockly ============ */
function initBlockly() {
  workspace = Blockly.inject('blockly', {
    toolbox: toolboxXml,
    trashcan: true,
    zoom: { startScale: 1.0 },
    grid: { spacing: 20, length: 3, colour: '#1f2937', snap: true }
  });

  // –æ–¥–∏–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫
  const startBlock = workspace.newBlock('when_run');
  startBlock.initSvg();
  startBlock.render();
  startBlock.moveBy(80, 30);
  startBlock.setDeletable(false);
  startBlock.setMovable(false);

  workspace.addChangeListener(updateLimitCounter);
}

/* ============ –£—Ä–æ–≤–Ω–∏ ============ */
function loadLevel(idx) {
  if (idx >= LEVELS_RABBIT.length) {
    showWinModal(true);
    return;
  }

  currentLevel = idx;
  const L = LEVELS_RABBIT[idx];
  $('#levelTitle').textContent = `Seviye ${idx + 1}/${LEVELS_RABBIT.length}`;
  $('#limit').textContent = L.maxBlocks;
  $('#used').textContent = 0;

  state = {
    size: L.size,
    grid: L.grid.map(row => row.split('')),
    original: L.grid.map(row => row.split('')), // –∫–æ–ø–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    carrots: 0,
    rabbit: { x: 0, y: 0 },
    start: { x: 0, y: 0 },
    exit: { x: 0, y: 0 },
    running: false
  };

  // —Ä–∞–∑–±–æ—Ä –∫–∞—Ä—Ç—ã
  for (let y = 0; y < state.size; y++) {
    for (let x = 0; x < state.size; x++) {
      const ch = state.grid[y][x];
      if (ch === 'C') {
        state.carrots++;
      } else if (ch === 'R') {
        state.rabbit = { x, y };
        state.start = { x, y };
        state.grid[y][x] = '.'; // –£–ë–ò–†–ê–ï–ú 'R' –∏–∑ —Å–µ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–≤—Ç–æ—Ä–æ–≥–æ¬ª –∫—Ä–æ–ª–∏–∫–∞
        state.original[y][x] = '.'; // –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ —Ç–æ–∂–µ
      } else if (ch === 'E') {
        state.exit = { x, y };
      }
    }
  }

  renderBoard();
  $('#goal').textContent = L.goal;
  clearCode();
}

function clearCode() {
  if (!workspace) return;
  const all = workspace.getAllBlocks(false);
  for (const b of all) if (b.type !== 'when_run') b.dispose(false, true);
  program = [];
  updateLimitCounter();
}

/* ============ –ü–æ–ª–µ ============ */
function renderBoard() {
  const board = $('#board');
  board.style.setProperty('--size', state.size);

  // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º canvas —Å –ø–æ–ª–µ–º
  fxCanvas.width = board.clientWidth;
  fxCanvas.height = board.clientHeight;
  cell = board.clientWidth / state.size;

  board.innerHTML = '';
  for (let y = 0; y < state.size; y++) {
    for (let x = 0; x < state.size; x++) {
      const ch = state.grid[y][x];
      const cellDiv = document.createElement('div');
      cellDiv.className = 'cell' + (ch === 'W' ? ' wall' : '');
      cellDiv.dataset.x = x;
      cellDiv.dataset.y = y;

      // —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ–Ω –∫–ª–µ—Ç–∫–∏ (–ø–æ–ª –∏–ª–∏ —Å—Ç–µ–Ω–∞/–º–æ—Ä–∫–æ–≤—å/–¥–≤–µ—Ä—å)
        // –≤–º–µ—Å—Ç–æ "if (EMOJI[ch]) { ... }"
      if (EMOJI[ch]) {
         const imgBG = document.createElement('img');
         imgBG.src = EMOJI[ch];
         imgBG.className = 'sprite';
         cellDiv.appendChild(imgBG);
      }

      // –ø–æ–≤–µ—Ä—Ö ‚Äî —Å–∞–º –∫—Ä–æ–ª–∏–∫, –µ—Å–ª–∏ –æ–Ω –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
      if (x === state.rabbit.x && y === state.rabbit.y) {
        const rab = document.createElement('img');
        rab.src = EMOJI['R'];
        rab.className = 'sprite';
        cellDiv.appendChild(rab);
      }

      board.appendChild(cellDiv);
    }
  }
}

function updateLimitCounter() {
  if (!workspace) return;
  const used = workspace.getAllBlocks(false).filter(b => b.type !== 'when_run').length;
  $('#used').textContent = used;
}

/* ============ –ö–æ–¥ –∏–∑ –±–ª–æ–∫–æ–≤ ============ */
function compile() {
  program = [];
  const code = Blockly.JavaScript.workspaceToCode(workspace);
  try {
    // eslint-disable-next-line no-new-func
    new Function('program', code)(program);
  } catch (e) {
    console.error(e);
  }
  return program;
}

function canUseMoreBlocks() {
  const used = workspace.getAllBlocks(false).filter(b => b.type !== 'when_run').length;
  return used <= LEVELS_RABBIT[currentLevel].maxBlocks;
}

/* ============ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ============ */
async function run() {
  if (state.running) return;
  if (!canUseMoreBlocks()) {
    showFailModal('√áok fazla blok kullandƒ±nƒ±z!');
    return;
  }
  compile();

  // –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫–∞—Ä—Ç—ã
  state.grid = state.original.map(row => [...row]);
  state.carrots = 0;
  for (let y = 0; y < state.size; y++)
    for (let x = 0; x < state.size; x++)
      if (state.grid[y][x] === 'C') state.carrots++;

  // —Å–±—Ä–æ—Å –≤ —Å—Ç–∞—Ä—Ç
  state.rabbit = { ...state.start };
  renderBoard();

  // ‚è∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º
  await sleep(300);

  state.running = true;
  for (const [cmd, arg] of program) {
    if (cmd === 'move') {
      const ok = await step(arg);
      if (!ok) {
        showFailModal('Duvara √ßarptƒ±nƒ±z veya sƒ±nƒ±rlardan √ßƒ±ktƒ±nƒ±z!');
        state.running = false;
        return;
      }
    } else if (cmd === 'take') {
      const ok = await takeCarrot();
      if (!ok) {
        state.running = false;
        return;
      }
    }
  }
  state.running = false;

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
  const won = checkWin();
  if (!won) {
    showFailModal('Tekrar deneyin!');
    // —Å–±—Ä–æ—Å–∏–º –∫—Ä–æ–ª–∏–∫–∞ –∏ –º–æ—Ä–∫–æ–≤–∫–∏
    state.rabbit = { ...state.start };
    state.grid = state.original.map(row => [...row]);
    state.carrots = 0;
    for (let y = 0; y < state.size; y++)
      for (let x = 0; x < state.size; x++)
        if (state.grid[y][x] === 'C') state.carrots++;
    renderBoard();
  }
}


/* ============ –î–≤–∏–∂–µ–Ω–∏–µ ============ */
async function step(dir) {
  const dx = dir === 'left' ? -1 : dir === 'right' ? 1 : 0;
  const dy = dir === 'up' ? -1 : dir === 'down' ? 1 : 0;
  const nx = state.rabbit.x + dx;
  const ny = state.rabbit.y + dy;

  // –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç–µ–Ω—ã
  if (nx < 0 || ny < 0 || nx >= state.size || ny >= state.size) return false;
  if (state.grid[ny][nx] === 'W') return false;

  state.rabbit.x = nx;
  state.rabbit.y = ny;
  renderBoard();
  await sleep(250);
  return true;
}

/* ============ –ú–æ—Ä–∫–æ–≤–∫–∞ ============ */
async function takeCarrot() {
  const { x, y } = state.rabbit;
  if (state.grid[y][x] === 'C') {
    try { sounds.carrot.currentTime = 0; sounds.carrot.play(); } catch {}
    await carrotPopFX(x, y);           // –≤—Å–ø—ã—à–∫–∞
    state.grid[y][x] = '.';            // —É–±–∏—Ä–∞–µ–º –º–æ—Ä–∫–æ–≤–∫—É
    state.carrots--;
    renderBoard();
    return true;
  } else {
    showFailModal('Burada havu√ß yok! ü•ï‚ùå');
    return false;
  }
}

/* ============ –ü–æ–±–µ–¥–∞/–ø—Ä–æ–≤–µ—Ä–∫–∞ ============ */
function checkWin() {
  const atExit = (state.rabbit.x === state.exit.x && state.rabbit.y === state.exit.y);
  const needCarrots = LEVELS_RABBIT[currentLevel].needCarrots;
  const allCarrots = (state.carrots === 0);

  if (atExit && (!needCarrots || allCarrots)) {
    try { sounds.win.currentTime = 0; sounds.win.play(); } catch {}
    exitFX(state.exit.x, state.exit.y);

    // ‚úÖ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π (10-–π) —É—Ä–æ–≤–µ–Ω—å ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞
    if (currentLevel === 9) {   // 9, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
      showWinModal(true);
    } else {
      showWinModal(false);
    }
    return true;
  } else if (atExit && needCarrots && !allCarrots) {
    showFailModal('T√ºm havu√ßlarƒ± toplayƒ±n!');
    return false;
  }
  return false;
}


/* ============ FX ============ */
function carrotPopFX(cx, cy) {
  return new Promise(resolve => {
    const start = performance.now();
    const loop = (t) => {
      const p = Math.min(1, (t - start) / CARROT_POP_MS);

      ctx.clearRect(0, 0, fxCanvas.width, fxCanvas.height);

      const x = cx * cell + cell / 2;
      const y = cy * cell + cell / 2;

      ctx.save();
      ctx.globalAlpha = 1 - p;
      ctx.lineWidth = 3;
      ctx.strokeStyle = '#f59e0b'; // –æ—Ä–∞–Ω–∂
      ctx.beginPath();
      ctx.arc(x, y, cell * (0.25 + 0.35 * p), 0, Math.PI * 2);
      ctx.stroke();
      ctx.restore();

      if (p < 1) requestAnimationFrame(loop);
      else {
        ctx.clearRect(0, 0, fxCanvas.width, fxCanvas.height);
        resolve();
      }
    };
    requestAnimationFrame(loop);
  });
}

function exitFX(cx, cy) {
  const start = performance.now();
  const loop = (t) => {
    const p = Math.min(1, (t - start) / EXIT_FX_MS);
    ctx.clearRect(0, 0, fxCanvas.width, fxCanvas.height);

    const x = cx * cell + cell / 2;
    const y = cy * cell + cell / 2;

    ctx.save();
    ctx.globalAlpha = 1 - p;
    ctx.lineWidth = 4;
    ctx.strokeStyle = '#3b82f6'; // —Å–∏–Ω–∏–π
    ctx.beginPath();
    ctx.arc(x, y, cell * (0.3 + 0.5 * p), 0, Math.PI * 2);
    ctx.stroke();
    ctx.restore();

    if (p < 1) requestAnimationFrame(loop);
  };
  requestAnimationFrame(loop);
}

/* ============ –ú–æ–¥–∞–ª–∫–∏ ============ */
function showFailModal(msg) {
  try { sounds.fail.currentTime = 0; sounds.fail.play(); } catch {}
  const dlg = $('#modal');
  $('#modalTitle').textContent = 'Hata!';
  $('#modalBody').innerHTML = `
    <p>${msg}</p>
    <img src="img/fail.png" alt="fail" style="max-width:120px">
    <div class="modal-actions"><button id="okBtn" class="btn primary">Tamam</button></div>
  `;
  dlg.showModal();

  // ‚úÖ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ä–º—ã
  dlg.querySelector('#okBtn').addEventListener('click', () => {
    dlg.close();
    state.rabbit = { ...state.start };
    renderBoard();
  });
}

function showWinModal(final) {
  const dlg = $('#modal');
  dlg.classList.remove('win-final');

  if (final) {
    dlg.classList.add('win-final');
    $('#modalTitle').textContent = 'Tebrikler! üèÜ';
    $('#modalBody').innerHTML = `
      <p>T√ºm seviyeleri tamamladƒ±nƒ±z!</p>
      <img src="img/trophy.png" alt="trophy">
      <div class="modal-actions"><button id="okBtn" class="btn primary">Tamam</button></div>
    `;
  } else {
    $('#modalTitle').textContent = 'Harika i≈ü!';
    $('#modalBody').innerHTML = `
      <p>Seviye tamamlandƒ±!</p>
      <img src="img/success.gif" alt="success">
      <div class="modal-actions"><button id="okBtn" class="btn primary">Tamam</button></div>
    `;
  }

  dlg.showModal();

  // ‚úÖ –∫–Ω–æ–ø–∫–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ä–º—ã
  dlg.querySelector('#okBtn').addEventListener('click', () => {
    dlg.close();
    if (!final) loadLevel(currentLevel + 1);
  });
}

/* ============ –ö–Ω–æ–ø–∫–∏/–°—Ç–∞—Ä—Ç ============ */
window.addEventListener('DOMContentLoaded', () => {
  fxCanvas = document.getElementById('fxCanvas');
  ctx = fxCanvas.getContext('2d');

  initBlockly();
  loadLevel(0);

  $('#runBtn').addEventListener('click', run);
  $('#resetBtn').addEventListener('click', () => loadLevel(currentLevel));
  //$('#hintBtn').addEventListener('click', () => {
    //const hint = LEVELS_RABBIT[currentLevel].hint || '–ü–æ–ø—Ä–æ–±—É–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.';
    //showFailModal(hint);
  //});

  $('#prevLevel').addEventListener('click', () => {
    if (currentLevel > 0) loadLevel(currentLevel - 1);
  });
  $('#nextLevel').addEventListener('click', () => {
    if (currentLevel < LEVELS_RABBIT.length - 1) loadLevel(currentLevel + 1);
  });

  // –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–º canvas —Å –ø–æ–ª–µ–º
  window.addEventListener('resize', () => renderBoard());
});
